BF_MPR = '  inc rax\n'
BF_MPL = '  dec rax\n'
BF_INC = '  inc byte [rax]\n'
BF_DEC = '  dec byte [rax]\n'
BF_OUT = (
    '  lea rbx, [pointer]\n'
    '  mov [rbx], rax\n'
    # '  mov [pointer], rax\n'
    # '  mov rcx, rax\n'
    '  mov rax, 4\n'
    '  mov rbx, 1\n'
    '  mov rcx, [pointer]\n'
    '  mov rdx, 1\n'
    '  int 80h\n'
    '  mov rax, [pointer]\n'
)
BF_INP = (
    '  lea rbx, [pointer]\n'
    '  mov [rbx], rax\n'
    # '  mov [pointer], rax\n'
    # '  mov rcx, rax\n'
    '  mov rax, 3\n'
    '  mov rbx, 0\n'
    '  mov rcx, [pointer]\n'
    '  mov rdx, 1\n'
    '  int 80h\n'
    '  mov rax, [pointer]\n'
)
BF_SOC = (
    '\n'
    'cycle_{}_start:\n'
    '  mov rbx, [rax]\n'
    '  test rbx, rbx\n'
    '  je cycle_{}_end\n'
)
BF_EOC = (
    '  jmp cycle_{}_start\n'
    'cycle_{}_end:\n'
)


def compile(text):
    cycles = []
    lc = 0
    asm = (
        '; This file generated by pybfc (Python BrainFuck Compiler)\n'
        '; code for yasm [nasm] - intel syntax\n'
        '; NOTE: Sorry, 64 bits arch needed\n'
        'global _start\n'
        '\n'
        'section .data\n'
        'brk:\n'
        '  dq 0x0000000000000000\n'
        'pointer:\n'
        '  dq 0x0000000000000000\n'
        '\n'
        'section .text\n'
        '_start:\n'
        '  mov rax, 45\n'
        '  mov rbx, brk\n'
        '  add rbx, 30000\n'
        '  int 80h\n'
        # '  mov rax, 19\n'
        # '  mov rbx, 0\n'
        # '  mov rcx, 1\n'
        # '  mov rdx, 0\n'
        # '  int 80h\n'
        '  mov rax, brk\n'
        '  add rax, 1000\n'
        # '  mov [brk], rax\n'
        '\n'
    )

    for c in text:
        if c == '>':
            asm += BF_MPR
        elif c == '<':
            asm += BF_MPL
        elif c == '+':
            asm += BF_INC
        elif c == '-':
            asm += BF_DEC
        elif c == '.':
            asm += BF_OUT
        elif c == ',':
            asm += BF_INP
        elif c == '[':
            lc += 1
            asm += BF_SOC.format(lc, lc)
            cycles.append(lc)
        elif c == ']':
            v = cycles.pop()
            asm += BF_EOC.format(v, v)
    
    asm += (
        '\n'
        '  mov rax, 1\n'
        '  mov rbx, 0\n'
        '  int 80h\n'
    )
    return asm
